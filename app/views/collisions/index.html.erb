<button>Clear</button>
<input id="origin-input" class="controls" type="text"
        placeholder="Enter an origin location">

<input id="destination-input" class="controls" type="text"
    placeholder="Enter a destination location">

<div id="mode-selector" class="controls">
  <input type="radio" name="type" id="changemode-walking" checked="checked">
  <label for="changemode-walking">Walking</label>

  <input type="radio" name="type" id="changemode-bicycling">
  <label for="changemode-transit">Bicycling</label>

  <!-- <input type="radio" name="type" id="changemode-transit">
  <label for="changemode-transit">Transit</label>

  <input type="radio" name="type" id="changemode-driving">
  <label for="changemode-driving">Driving</label> -->
</div>

<div id="map"></div>
<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
<script>
  // This example requires the Places library. Include the libraries=places
  // parameter when you first load the API. For example:
  // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

  function initMap() {
    var map = new google.maps.Map(document.getElementById('map'), {
      mapTypeControl: false,
      center: {lat: 40.7549, lng: -73.9840},
      zoom: 13
    });

    new AutocompleteDirectionsHandler(map);
  }

   /**
    * @constructor
   */
  function AutocompleteDirectionsHandler(map) {
    this.map = map;
    this.originPlaceId = null;
    this.destinationPlaceId = null;
    this.travelMode = 'WALKING';
    var originInput = document.getElementById('origin-input');
    var destinationInput = document.getElementById('destination-input');
    var modeSelector = document.getElementById('mode-selector');
    this.directionsService = new google.maps.DirectionsService;
    this.directionsDisplay = new google.maps.DirectionsRenderer({
      draggable: true,
    });
    this.directionsDisplay.setMap(map);

    var originAutocomplete = new google.maps.places.Autocomplete(
        originInput, {placeIdOnly: true});
    var destinationAutocomplete = new google.maps.places.Autocomplete(
        destinationInput, {placeIdOnly: true});

    this.setupClickListener('changemode-walking', 'WALKING');
    this.setupClickListener('changemode-bicycling', 'BICYCLING');
    // this.setupClickListener('changemode-transit', 'TRANSIT');
    // this.setupClickListener('changemode-driving', 'DRIVING');

    this.setupPlaceChangedListener(originAutocomplete, 'ORIG');
    this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');

    this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(originInput);
    this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(destinationInput);
    this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelector);
  }

  // Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  AutocompleteDirectionsHandler.prototype.setupClickListener = function(id, mode) {
    var radioButton = document.getElementById(id);
    var me = this;
    radioButton.addEventListener('click', function() {
      me.travelMode = mode;
      me.route();
    });
  };

  AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function(autocomplete, mode) {
    var me = this;
    autocomplete.bindTo('bounds', this.map);
    autocomplete.addListener('place_changed', function() {
      var place = autocomplete.getPlace();
      if (!place.place_id) {
        window.alert("Please select an option from the dropdown list.");
        return;
      }
      if (mode === 'ORIG') {
        me.originPlaceId = place.place_id;
      } else {
        me.destinationPlaceId = place.place_id;
      }
      me.route();
    });

  };



  AutocompleteDirectionsHandler.prototype.route = function() {
    if (!this.originPlaceId || !this.destinationPlaceId) {
      return;
    }
    var me = this;

    this.directionsService.route({
      origin: {'placeId': this.originPlaceId},
      destination: {'placeId': this.destinationPlaceId},
      travelMode: this.travelMode,
      provideRouteAlternatives: true,
    }, function(response, status) {
      if (status === 'OK') {
        
        //   // me.directionsDisplay.setDirections(response);
          // me.directionsDisplay.setOptions({map: this.map, directions:response, routeIndex:i});

        for (var i = 0, len = response.routes.length; i < len; i++) {
          
        new google.maps.DirectionsRenderer({
                map: this.map,
                directions: response,
                routeIndex: i
            });
            var accidents = [0,0,0];
            var counter = 0;
            for (var n = 0; n < response.routes["" + i + ""].overview_path.length; n++) {
              // console.log(response.routes["" + i + ""].overview_path.length);
              // this.map.data.loadGeoJson("https://data.cityofnewyork.us/resource/qiz3-axqb.geojson?$where=within_circle(location, " + response.routes["" + i + ""].overview_path["" + n + ""].lat() + ", " + response.routes["" + i + ""].overview_path["" + n + ""].lng() + ", 15) AND (number_of_persons_injured > 0 OR number_of_persons_killed > 0)");
              console.log("here i am above");
                      console.log(i);
                      var outsideI = i;
                      console.log("here i am above");
              $.get("https://data.cityofnewyork.us/resource/qiz3-axqb.geojson?$where=within_circle(location, " + response.routes["" + i + ""].overview_path["" + n + ""].lat() + ", " + response.routes["" + i + ""].overview_path["" + n + ""].lng() + ", 15) AND (number_of_pedestrians_injured > 0 OR number_of_pedestrians_killed > 0 OR number_of_cyclist_injured > 100 OR number_of_cyclist_killed > 0)").success(function(result) {
                    var markers = [];
                  // function getCount() {
                    // console.log("here i am outside");
                    // console.log(i);
                    // console.log("here i am outside");
                    for (var f = 0; f < result.features.length; f++) {
                      // console.log("here i am inside");
                      // console.log(i);
                      // console.log("here i am inside");
                    var coords = result.features[f].geometry.coordinates;
                    var latLng = new google.maps.LatLng(coords[1],coords[0]);
                    var marker = new google.maps.Marker({
                      position: latLng,
                      map: this.map
                    }
                    );
            //         markers.push(marker);
            //         var markerCluster = new MarkerClusterer(this.map, markers,
            // {imagePath: 'http://chart.apis.google.com/chart?cht=mm&chs=24x32&chco=FFFFFF,008CFF,000000&ext=.png'});
                    // console.log(accidents);
                    console.log("outsideI")
                    console.log(outsideI)
                    accidents[i] += result.features.length;
                    counter += result.features.length;

                    // }.done(function(){
                    // console.log("result");
                    // console.log(result);
                    // console.log(accidents);
                    // console.log(counter);
                    // });
                    
                  }
              }.bind(this));
              
            }
                  // console.log("show up three times");

            // var data = this.map.data.b;
            // console.log(this.map.data);
            // console.log(this.map.data.b.b);
            // console.log(Object.keys(data));
        }
        // 
      } else {
        window.alert('Directions request failed due to ' + status);
      }
      
      // console.log(response.routes["0"].overview_path["0"]);
      // console.log(response.routes);
      // console.log(response.routes["0"].overview_path["0"].lat());
      // console.log(response.routes["0"].overview_path["1"].lat());
      // console.log(response.routes["0"].overview_path["0"].lng());
      // console.log(response.routes["0"].overview_path["1"].lng());
      // console.log(response.routes["0"].overview_path.length);
      // this.map.data.loadGeoJson("https://data.cityofnewyork.us/resource/qiz3-axqb.geojson?$where=within_circle(location, 40.73214, -73.99860000000001, 100)");
      // for (var i = 0; i < response.routes["0"].overview_path.length; i++) {
      // this.map.data.loadGeoJson("https://data.cityofnewyork.us/resource/qiz3-axqb.geojson?$where=within_circle(location, " + response.routes["0"].overview_path["" + i + ""].lat() + ", " + response.routes["0"].overview_path["" + i + ""].lng() + ", 15) AND (number_of_persons_injured > 0 OR number_of_persons_killed > 0)");
      // console.log(this.map.data);
      // }
      // https://data.cityofnewyork.us/resource/qiz3-axqb.geojson?$where=within_circle(location,%2040.73214,%20-73.99860000000001,%20100)%20AND%20(number_of_persons_injured%20%3E%200%20OR%20number_of_persons_killed%20%3E%200)
      this.map.data.setStyle(function(feature) {
        // var magnitude = feature.getProperty('mag');
        return {
          icon: getCircle()
        };
      });
    }.bind(this));
  };

  function getCircle() {
    return {
      path: google.maps.SymbolPath.CIRCLE,
      fillColor: 'red',
      fillOpacity: .02,
      scale: 10,
      strokeColor: 'black',
      strokeWeight: .5
    };
  }

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=KEYGOESHERE&libraries=places&callback=initMap"
    async defer></script>